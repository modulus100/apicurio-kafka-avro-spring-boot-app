server:
  port: 8083

app:
  kafka:
    topic: demo-topic
  examples:
    generic:
      enabled: false
    specific:
      enabled: true

spring:
  application:
    name: app-consumer
  kafka:
    bootstrap-servers: localhost:9092
    properties:
      schema.registry.url: http://localhost:8081/apis/ccompat/v7
      auto.register.schemas: false
      value.subject.name.strategy: io.confluent.kafka.serializers.subject.TopicNameStrategy
      # --- OAuth2 for Schema Registry (Keycloak) ---
      # Confluent SR client will obtain tokens via client-credentials from Keycloak
      bearer.auth.credentials.source: OAUTHBEARER
      bearer.auth.issuer.endpoint.url: http://localhost:8080/realms/demo/protocol/openid-connect/token
      bearer.auth.client.id: ${SR_OIDC_CLIENT_ID:sr-client}
      bearer.auth.client.secret: ${SR_OIDC_CLIENT_SECRET:gcYKrqUN9o8SrNlndrcrOs0pceQR4HIz}
      # Optional scope; often not required for client-credentials in Keycloak
      bearer.auth.scope: ${SR_OIDC_SCOPE:}
    consumer:
      group-id: demo-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        specific.avro.reader: true
    listener:
      missing-topics-fatal: false
    admin:
      # allow auto creation of topics via AdminClient
      auto-create: true
      fail-fast: true
