/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Keep common Java conventions (toolchain, repositories)
    id("buildlogic.java-common-conventions")

    // Spring Boot + dependency management
    id("org.springframework.boot") version "3.5.4"
    id("io.spring.dependency-management") version "1.1.6"
}

repositories {
    maven("https://packages.confluent.io/maven/")
    mavenCentral()
}

// Use official Apache Avro tools (no plugin) to generate SpecificRecord classes
configurations {
    create("avroTools")
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.kafka:spring-kafka")

    // Confluent serializer for Avro (works with Apicurio ccompat API)
    implementation("io.confluent:kafka-avro-serializer:8.0.0")
    implementation("org.apache.avro:avro:1.12.0")

    // CloudEvents SDK (use headers in binary mode)
    implementation("io.cloudevents:cloudevents-core:4.0.1")
    implementation("io.cloudevents:cloudevents-kafka:4.0.1")

    // Avro code generator CLI
    "avroTools"("org.apache.avro:avro-tools:1.12.0")


    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.kafka:spring-kafka-test")
}

// Directories for Avro schemas and generated code
val avroSrcDir = layout.projectDirectory.dir("src/main/avro")
val avroOutDir = layout.buildDirectory.dir("generated-src/avro")

// Task to generate Java from Avro schemas
tasks.register<JavaExec>("generateAvroJava") {
    group = "build"
    description = "Generate Avro SpecificRecord classes from src/main/avro"
    classpath = configurations.getByName("avroTools")
    mainClass.set("org.apache.avro.tool.Main")
    args("compile", "schema", avroSrcDir.asFile.absolutePath, avroOutDir.get().asFile.absolutePath)
    inputs.dir(avroSrcDir.asFile)
    outputs.dir(avroOutDir)
}

// Add generated sources to main source set
sourceSets {
    named("main") {
        java.srcDir(avroOutDir)
    }
}

tasks.test {
    useJUnitPlatform()
}

// Ensure Spring Boot uses the correct main class
springBoot {
    mainClass.set("org.example.app.ProducerApp")
}

tasks.named<org.springframework.boot.gradle.tasks.run.BootRun>("bootRun") {
    mainClass.set("org.example.app.ProducerApp")
}

// Ensure code generation happens before Java compilation
tasks.named("compileJava") {
    dependsOn("generateAvroJava")
}

